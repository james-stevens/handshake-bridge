diff --git a/lib/node/rpc.js b/lib/node/rpc.js
index 6f8ac687..d33295ef 100644
--- a/lib/node/rpc.js
+++ b/lib/node/rpc.js
@@ -6,6 +6,10 @@
 
 'use strict';
 
+const constants = require('bns/lib/constants');
+const wire = require('bns/lib/wire');
+const fs = require('fs');
+const bns = require('bns');
 const assert = require('bsert');
 const bweb = require('bweb');
 const {Lock} = require('bmutex');
@@ -47,6 +51,11 @@ const RPCError = bweb.RPCError;
  * Constants
  */
 
+const {
+	types
+} = constants;
+
+
 const errs = {
   // Standard JSON-RPC 2.0 errors
   INVALID_REQUEST: bweb.errors.INVALID_REQUEST,
@@ -244,6 +253,7 @@ class RPC extends RPCBase {
     this.add('sendrawclaim', this.sendRawClaim);
     this.add('sendrawairdrop', this.sendRawAirdrop);
     this.add('validateresource', this.validateResource);
+    this.add('dumpzone', this.dumpzone);
 
     // Compat
     // this.add('getnameinfo', this.getNameInfo);
@@ -2320,10 +2330,69 @@ class RPC extends RPCBase {
       const info = ns.getJSON(height, network);
       items.push(info);
     }
-
     return items;
   }
 
+  async dumpzone(args, help) {
+
+	this.logger.debug("DUMP-ZONE Start");
+
+	if (help || args.length !== 1)
+	  throw new RPCError(errs.MISC_ERROR, 'dumpzone <filename>');
+
+    const valid = new Validator(args);
+    const filename = valid.str(0, null);
+    if (filename == null) 
+	  throw new RPCError(errs.MISC_ERROR, 'dumpzone <filename>');
+
+	const tmp = filename + "~";
+	this.logger.debug("DUMP-ZONE filename",filename);
+
+	let fd = null;
+	let fileErr = null
+	fd = fs.createWriteStream(tmp, { flags: 'a+' });
+	fd.on('error', err => { fd.end(); fd=null; fileErr = err; });
+
+    const network = this.network;
+    const height = this.chain.height;
+    const txn = this.chain.db.txn;
+    const items = [];
+
+    const iter = txn.iterator(true);
+
+	this.logger.debug("DUMP-ZONE Ready");
+
+	let numNames = 0
+	while ((await iter.next())&&(fd != null)) {
+
+	  if (fd == null) break;
+	  if ((++numNames % 5000)==0) this.logger.debug("DUMP-ZONE Progress",numNames);
+
+	  const {key, value} = iter;
+	  const ns = NameState.decode(value);
+	  if (ns.data.length <= 0) continue;
+
+	  const fqdn = bns.util.fqdn(ns.name.toString('ascii'));
+	  const resource = Resource.decode(ns.data);
+	  const dns = resource.toDNS(fqdn, 0);
+
+	  for (const rr of dns.records()) {
+		if (fd == null) break;
+		if (rr.type !== types.RRSIG) fd.write(rr.toString() + "\n");
+		}
+	}
+
+	if (fd == null) return fileErr;
+
+	fd.end();
+	fs.renameSync(tmp,filename);
+
+	this.logger.debug("DUMP-ZONE Finish",numNames);
+
+    return filename;
+  }
+
   async getNameInfo(args, help) {
     if (help || args.length !== 1)
       throw new RPCError(errs.MISC_ERROR, 'getnameinfo "name"');
